from .base_tool import BaseTool
import google.generativeai as genai
import pandas as pd

class GapAnalysisTool(BaseTool):
    def __init__(self):
        super().__init__()
        genai.configure(api_key="AIzaSyCCKsZYOSP53ZGjF9p0ro1eNUYcdODCbtk")
        self.model = genai.GenerativeModel("models/gemini-2.5-flash")

    @property
    def name(self) -> str:
        return "Gap Analysis MCP Tool"

    @property
    def description(self) -> str:
        return "Outil MCP pour l'analyse d'√©carts (Match, Compare, Predict)"

    def use(self, files: dict) -> tuple[str, dict]:
        client_content = files['client'].read().decode('utf-8')
        company_content = files['company'].read().decode('utf-8')
        employee_data = pd.read_csv(files['employee']).head(5).to_string() if 'employee' in files else "Non fourni"
        
        prompt = f"""
# ANALYSE STRAT√âGIQUE D'√âCARTS (GAP ANALYSIS) - MCP FRAMEWORK

## CONTEXTE OP√âRATIONNEL
Vous √™tes un consultant strat√©gique charg√© d'identifier et quantifier les √©carts entre :
- Les exigences clients (besoins m√©tiers et techniques)
- Les capacit√©s actuelles de l'entreprise
- Les comp√©tences disponibles des √©quipes

## DONN√âES SOURCES
=== BESOINS CLIENTS === (Extrait analys√©)
{client_content[:1000]}...

=== RESSOURCES INTERNES === (Capacit√©s existantes)
{company_content[:1000]}...

=== COMP√âTENCES √âQUIPE === (Top 5 lignes)
{employee_data}

## M√âTHODOLOGIE D'ANALYSE

### 1. MATCH (CORRESPONDANCES)
- Identifier les capacit√©s **parfaitement align√©es** (score 90-100%)
- Lister les ressources **partiellement utilisables** (score 50-89%)
- Calculer le **taux de couverture global**

### 2. COMPARE (ECARTS CRITIQUES)
Classer les gaps en 3 cat√©gories :
1. **Techniques** (Outils/Technologies manquantes)
   - Niveau : Critique/Haute/Moyenne/Faible
   - Impact : Chiffr√© (‚Ç¨, temps, risque)
   
2. **Comp√©tences** (Gaps de savoir-faire)
   - Cartographie des comp√©tences manquantes
   - Niveau requis vs. actuel (Expert/Interm√©diaire/D√©butant)
   
3. **Organisationnels** (Processus/Structure)
   - Ad√©quation √©quipes/projets
   - Gouvernance et flux d√©cisionnels

### 3. PREDICT (SOLUTIONS STRAT√âGIQUES)
Pour chaque gap critique :
- Solutions **internes** (R√©affectation/Formation)
- Solutions **externes** (Recrutement/Partnership)
- Plan de mitigation des risques

## FORMAT DE SORTIE REQUIS

```markdown
### BILAN GLOBAL
- Couverture besoins : XX% (YY/ZZ exigences couvertes)
- Gaps critiques : [Techniques: A, Comp√©tences: B, Orga: C]
- Investissement estim√© : [Formation: X‚Ç¨, Recrutement: Y‚Ç¨]

### MATRICE DES CORRESPONDANCES (TOP 5)
| Exigence              | Ressource          | Score | Type          |
|-----------------------|--------------------|-------|---------------|
| [Description]        | [Solution]         | 85%   | Partiel       |

### GAPS PRIORITAIRES
**1. [Nom du Gap]**  
- Type : [Technique/Comp√©tence/Orga]  
- Criticit√© : üî¥ Critique (Score: X/10)  
- Impact : [Description quantitative]  
- Solutions :  
  ‚ñ∏ [Solution 1] (Co√ªt: X‚Ç¨, D√©lai: Y semaines)  
  ‚ñ∏ [Solution 2] (Co√ªt: X‚Ç¨, D√©lai: Y semaines)  

### ROADMAP RECOMMAND√âE
1. [Mois 1] Action prioritaire (Ressources: [A,B,C])
2. [Mois 2-3] Correctifs structurels
3. [Mois 4+] Optimisation continue
"""
        response = self.model.generate_content(prompt)
        return response.text, {'mcp_analysis': response.text}