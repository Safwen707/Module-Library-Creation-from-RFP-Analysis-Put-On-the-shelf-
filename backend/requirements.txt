# ============================================================================
# REQUIREMENTS.TXT - RFP ANALYSIS SYSTEM WITH FASTAPI
# ============================================================================
#
# Système complet d'analyse RFP avec FastAPI backend et agents IA
# Installation : pip install -r requirements.txt
# Mise à jour : pip install -r requirements.txt --upgrade
#
# ============================================================================

# ============================================================================
# FASTAPI & WEB SERVER STACK
# ============================================================================
fastapi>=0.104.0                          # Framework web moderne et rapide
uvicorn[standard]>=0.24.0                 # Serveur ASGI avec support WebSocket
pydantic>=2.5.0                           # Validation de données et sérialisation
python-multipart>=0.0.6                   # Support upload de fichiers
websockets>=12.0                          # Communication temps réel
python-jose[cryptography]>=3.3.0          # JWT tokens (optionnel pour auth)

# ============================================================================
# CORE RAG & LANGCHAIN ECOSYSTEM
# ============================================================================
langchain>=0.1.0,<0.2.0                   # Framework RAG principal
langchain-community>=0.0.10               # Extensions communautaires
langchain-huggingface>=0.0.1              # Intégration HuggingFace
sentence-transformers>=2.2.2              # Modèles d'embeddings optimisés

# ============================================================================
# RECHERCHE VECTORIELLE & EMBEDDINGS
# ============================================================================
faiss-cpu>=1.7.4                          # Recherche vectorielle haute performance
numpy>=1.21.0,<2.0                        # Calculs numériques (compatible FAISS)
chromadb>=0.4.0                           # Alternative vectorielle moderne

# ============================================================================
# TRAITEMENT PDF & DOCUMENTS
# ============================================================================
PyPDF2>=3.0.0                             # Extraction texte PDF standard
pypdf>=3.0.0                              # Alternative extraction PDF
pdf2image>=1.17.0                         # Conversion PDF → images (VLM)
Pillow>=9.0.0                             # Manipulation images
pdfplumber>=0.7.0                         # Extraction PDF avancée
python-docx>=0.8.11                       # Traitement documents Word

# ============================================================================
# MACHINE LEARNING & TRANSFORMERS
# ============================================================================
torch>=1.13.0                             # PyTorch pour transformers
transformers>=4.21.0                      # Modèles Transformer HuggingFace
tokenizers>=0.13.0                        # Tokenisation rapide
huggingface_hub>=0.16.0                   # Hub HuggingFace pour modèles

# ============================================================================
# API & LLM SERVICES
# ============================================================================
together>=0.2.0                           # API Together.ai (LLM + VLM)
google-generativeai>=0.3.0                # API Gemini Google
openai>=1.3.0                             # API OpenAI (optionnel)
requests>=2.28.0                          # Requêtes HTTP pour APIs
httpx>=0.25.0                             # Client HTTP async pour FastAPI

# ============================================================================
# TENSORFLOW ECOSYSTEM (VERSION STABLE)
# ============================================================================
tensorflow-cpu==2.19.0                    # TensorFlow CPU-only (évite conflits Intel)
tf-keras==2.19.0                          # Keras compatible
tensorboard==2.19.0                       # Visualisation TensorFlow
ml-dtypes==0.5.1                          # Types de données ML

# ============================================================================
# DATA PROCESSING & ANALYSIS
# ============================================================================
pandas>=2.0.0                             # Analyse de données
numpy>=1.24.0                             # Calculs numériques
scikit-learn>=1.3.0                       # Machine Learning
matplotlib>=3.7.0                         # Visualisations
seaborn>=0.12.0                           # Graphiques statistiques avancés
plotly>=5.15.0                            # Graphiques interactifs

# ============================================================================
# REPORT GENERATION & EXPORT
# ============================================================================
reportlab>=4.0.0                          # Génération PDF
jinja2>=3.1.0                             # Templates pour rapports
markdown>=3.5.0                           # Conversion Markdown
xhtml2pdf>=0.2.11                         # HTML vers PDF
openpyxl>=3.1.0                           # Export Excel
xlsxwriter>=3.1.0                         # Écriture fichiers Excel avancée

# ============================================================================
# BACKGROUND TASKS & ASYNC
# ============================================================================
celery>=5.3.0                             # Tâches asynchrones (optionnel)
redis>=5.0.0                              # Cache et message broker
asyncio                                   # Programmation asynchrone (standard lib)
aiofiles>=23.0.0                          # Opérations fichiers async

# ============================================================================
# SECURITY & ENVIRONMENT
# ============================================================================
python-dotenv>=1.0.0                      # Variables d'environnement (.env)
cryptography>=41.0.0                      # Sécurisation clés API
passlib[bcrypt]>=1.7.4                    # Hachage mots de passe (optionnel)
python-jose[cryptography]>=3.3.0          # JWT tokens

# ============================================================================
# MONITORING & LOGGING
# ============================================================================
structlog>=23.1.0                         # Logging structuré
rich>=13.0.0                              # Affichage console enrichi
tqdm>=4.66.0                              # Barres de progression

# ============================================================================
# DEVELOPMENT & TESTING (OPTIONNEL)
# ============================================================================
pytest>=7.4.0                             # Framework de tests
pytest-asyncio>=0.21.0                    # Tests asynchrones
httpx>=0.25.0                             # Client test pour FastAPI
black>=23.0.0                             # Formatage code
flake8>=6.0.0                             # Linting
mypy>=1.5.0                               # Type checking

# ============================================================================
# DATABASE SUPPORT (OPTIONNEL)
# ============================================================================
sqlalchemy>=2.0.0                         # ORM base de données
psycopg2-binary>=2.9.7                    # PostgreSQL adapter
alembic>=1.12.0                           # Migrations de base de données

# ============================================================================
# CORS & MIDDLEWARE
# ============================================================================
python-multipart>=0.0.6                   # Upload de fichiers
python-json-logger>=2.0.7                 # Logging JSON

# ============================================================================
# SYSTEM DEPENDENCIES (DÉJÀ DANS PYTHON)
# ============================================================================
# pathlib                                  # Manipulation chemins (Python 3.4+)
# uuid                                     # Génération IDs uniques (standard lib)
# json                                     # Gestion JSON (standard lib)
# re                                       # Expressions régulières (standard lib)
# os                                       # Opérations système (standard lib)
# base64                                   # Encodage base64 (standard lib)
# asyncio                                  # Programmation asynchrone (standard lib)
# datetime                                 # Manipulation dates (standard lib)
# tempfile                                 # Fichiers temporaires (standard lib)
# shutil                                   # Opérations fichiers (standard lib)

# ============================================================================
# NOTES D'INSTALLATION POUR FASTAPI + RFP SYSTEM
# ============================================================================
#
# 1. ENVIRONNEMENT VIRTUEL RECOMMANDÉ :
#    python -m venv venv
#    venv\Scripts\activate (Windows)
#    source venv/bin/activate (Linux/Mac)
#
# 2. INSTALLATION COMPLÈTE :
#    pip install -r requirements.txt
#
# 3. INSTALLATION MINIMALE (SANS DÉPENDANCES OPTIONNELLES) :
#    pip install fastapi uvicorn pydantic python-multipart
#    pip install langchain langchain-community sentence-transformers
#    pip install together google-generativeai pandas numpy
#
# 4. VÉRIFICATION INSTALLATION :
#    python -c "import fastapi, langchain, transformers; print('✅ Backend OK')"
#    uvicorn main:app --reload  # Test serveur
#
# 5. VARIABLES D'ENVIRONNEMENT REQUISES :
#    TOGETHER_API_KEY=your_together_api_key
#    GEMINI_API_KEY=your_gemini_api_key
#
# 6. DÉMARRAGE SERVEUR :
#    python main.py
#    # ou
#    uvicorn main:app --host 0.0.0.0 --port 8000 --reload
#
# 7. VÉRIFICATION ENDPOINTS :
#    curl http://localhost:8000/api/health
#    Accès documentation : http://localhost:8000/docs
#
# 8. MISE À JOUR :
#    pip install -r requirements.txt --upgrade
#
# 9. EXPORT ÉTAT ACTUEL :
#    pip freeze > requirements_freeze.txt
#
# 10. INSTALLATION POUR PRODUCTION :
#     pip install -r requirements.txt --no-cache-dir
#     # Ajoutez gunicorn pour production :
#     pip install gunicorn
#
# ============================================================================
# DÉPENDANCES SPÉCIFIQUES PAR COMPOSANT FRONTEND
# ============================================================================
#
# Pour analysis-dashboard.tsx :
# - pandas, numpy (calculs)
# - matplotlib, seaborn (graphiques)
#
# Pour detailed-module-breakdown.tsx :
# - langchain, faiss-cpu (recherche modules)
# - transformers (analyse sémantique)
#
# Pour module-cost-estimator.tsx :
# - pandas (calculs coûts)
# - scikit-learn (estimations ML)
#
# Pour pattern-analysis.tsx :
# - sentence-transformers (analyse patterns)
# - faiss-cpu (recherche vectorielle)
#
# Pour recruitment-optimizer.tsx :
# - pandas, numpy (optimisation)
# - scikit-learn (recommandations ML)
#
# Pour reports-panel.tsx :
# - reportlab, jinja2 (génération PDF)
# - openpyxl (export Excel)
#
# Pour rfp-analysis.tsx :
# - together, google-generativeai (LLM)
# - pdfplumber, python-docx (extraction)
#
# ============================================================================