# -*- coding: utf-8 -*-
"""
Syst√®me Int√©gr√© d'Analyse RFP
Main global orchestrant CustomerNeedsAgent + GapAnalysisAgent + ModuleMatchAgent
"""

import os
import json
from pathlib import Path
from typing import Dict, Any
import pandas as pd
import google.generativeai as genai
from together import Together
import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.colors import HexColor
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.lib.units import inch
import matplotlib.pyplot as plt
import pdfplumber
import docx
import re

# Import de votre CustomerNeedsAgent existant
from customer_needs_agent import CustomerNeedsAgent
from report_agent import RFPResponseGenerator
from md_to_pdf import main

class IntegratedRFPAnalysisSystem:
    """Syst√®me int√©gr√© d'analyse RFP avec orchestration multi-agents"""

    def __init__(self, together_api_key: str, gemini_api_key: str):
        """
        Initialise le syst√®me avec les cl√©s API

        Args:
            together_api_key: Cl√© API Together pour CustomerNeedsAgent
            gemini_api_key: Cl√© API Gemini pour les autres agents
        """
        self.together_api_key = together_api_key
        self.gemini_api_key = gemini_api_key

        # Configuration des APIs
        genai.configure(api_key=gemini_api_key)

        # Initialisation des agents
        self.customer_needs_agent = CustomerNeedsAgent(together_api_key)
        self.gap_analysis_agent = GapAnalysisAgent(gemini_api_key)
        self.module_match_agent = ModuleMatchAgent(gemini_api_key)

        # Configuration du mod√®le pour l'orchestrateur
        self.orchestrator_model = genai.GenerativeModel("models/gemini-2.0-flash-exp")

    def upload_rfp_interface(self) -> str:
        """Interface pour uploader le RFP"""
        print("üî• SYST√àME D'ANALYSE RFP INT√âGR√â")
        print("=" * 50)
        print("\nüìÑ √âTAPE 1: Upload du document RFP")
        print("Formats support√©s: PDF, DOCX, TXT")

        while True:
            rfp_path = input("\n‚û§ Chemin vers votre RFP: ").strip('"\' ')
            if Path(rfp_path).exists():
                print(f"‚úÖ RFP d√©tect√©: {Path(rfp_path).name}")
                return rfp_path
            print(f"‚ùå Fichier non trouv√©: {rfp_path}")

    def get_analysis_report_path(self) -> str:
        """Interface pour obtenir le path du rapport d'analyse"""
        print("\nüìä √âTAPE 2: Rapport d'analyse des patterns")
        print("Fichier: analysis_report_success_failure_patterns")

        while True:
            report_path = input("\n‚û§ Chemin vers le rapport d'analyse: ").strip('"\' ')
            if Path(report_path).exists():
                print(f"‚úÖ Rapport d√©tect√©: {Path(report_path).name}")
                return report_path
            print(f"‚ùå Fichier non trouv√©: {report_path}")

    def load_company_resources(self) -> str:
        """Interface pour charger les ressources de l'entreprise"""
        print("\nüè¢ √âTAPE 3: Ressources internes de l'entreprise")

        while True:
            resources_path = input("\n‚û§ Chemin vers les ressources internes: ").strip('"\' ')
            if Path(resources_path).exists():
                print(f"‚úÖ Ressources d√©tect√©es: {Path(resources_path).name}")
                return resources_path
            print(f"‚ùå Fichier non trouv√©: {resources_path}")

    def load_employee_data(self) -> str:
        """Interface pour charger les donn√©es des employ√©s"""
        print("\nüë• √âTAPE 4: Donn√©es des employ√©s/comp√©tences")

        while True:
            employee_path = input("\n‚û§ Chemin vers les donn√©es employ√©s (CSV): ").strip('"\' ')
            if Path(employee_path).exists():
                print(f"‚úÖ Donn√©es employ√©s d√©tect√©es: {Path(employee_path).name}")
                return employee_path
            print(f"‚ùå Fichier non trouv√©: {employee_path}")

    def orchestrate_agents(self, customer_needs: str, analysis_report_path: str,
                          company_resources_path: str, employee_data_path: str) -> Dict[str, Any]:
        """
        Orchestre la collaboration entre GapAnalysisAgent et ModuleMatchAgent

        Args:
            customer_needs: R√©sultats de l'analyse des besoins clients
            analysis_report_path: Chemin vers le rapport d'analyse
            company_resources_path: Chemin vers les ressources internes
            employee_data_path: Chemin vers les donn√©es employ√©s

        Returns:
            Dictionnaire avec tous les r√©sultats d'analyse
        """
        print("\nü§ñ √âTAPE 5: Orchestration des agents d'analyse")
        print("=" * 50)

        # Pr√©paration des fichiers pour les agents
        files_data = {
            'client_needs': customer_needs,
            'analysis_report': self._load_file_content(analysis_report_path),
            'company_resources': self._load_file_content(company_resources_path),
            'employee_data': employee_data_path
        }

        print("üîÑ Lancement de GapAnalysisAgent...")
        gap_analysis_result = self.gap_analysis_agent.analyze(files_data)

        print("üîÑ Lancement de ModuleMatchAgent...")
        module_match_result = self.module_match_agent.analyze(files_data)

        print("üîÑ Synth√®se orchestrateur...")
        orchestrator_synthesis = self._create_orchestrator_synthesis(
            gap_analysis_result, module_match_result, customer_needs
        )

        return {
            'gap_analysis': gap_analysis_result,
            'module_match': module_match_result,
            'orchestrator_synthesis': orchestrator_synthesis,
            'customer_needs': customer_needs
        }

    def _load_file_content(self, file_path: str) -> str:
        """Charge le contenu d'un fichier selon son extension"""
        path = Path(file_path)
        ext = path.suffix.lower()

        if ext == ".pdf":
            with pdfplumber.open(path) as pdf:
                return "\n".join(p.extract_text() or "" for p in pdf.pages)
        elif ext in {".docx", ".doc"}:
            doc = docx.Document(path)
            return "\n".join(p.text for p in doc.paragraphs)
        elif ext == ".csv":
            df = pd.read_csv(path)
            return df.head(10).to_string()
        else:
            return path.read_text(encoding='utf-8')

    def _create_orchestrator_synthesis(self, gap_analysis: str, module_match: str, customer_needs: str) -> str:
        """Cr√©e une synth√®se orchestr√©e des analyses"""

        prompt = f"""
# SYNTH√àSE ORCHESTR√âE - ANALYSE STRAT√âGIQUE COMPL√àTE

Vous √™tes un directeur technique senior qui doit synth√©tiser les analyses suivantes pour cr√©er une roadmap strat√©gique globale.

## DONN√âES D'ENTR√âE

### BESOINS CLIENTS IDENTIFI√âS
{customer_needs[:1500]}...

### ANALYSE DES √âCARTS (GAP ANALYSIS)
{gap_analysis[:1500]}...

### CORRESPONDANCE MODULAIRE (MODULE MATCH)
{module_match[:1500]}...

## MISSION STRAT√âGIQUE

Cr√©ez une synth√®se ex√©cutive qui int√®gre TOUTES les analyses pour produire:

### 1. BILAN STRAT√âGIQUE GLOBAL
- Niveau de pr√©paration de l'entreprise (score/10)
- Risques majeurs identifi√©s
- Opportunit√©s de diff√©renciation

### 2. ROADMAP TECHNIQUE INT√âGR√âE
Priorisez les actions par criticit√©:
- Phase 1 (0-3 mois): Actions critiques imm√©diates
- Phase 2 (3-6 mois): D√©veloppements structurels  
- Phase 3 (6+ mois): Optimisations avanc√©es

### 3. PLAN DE RESSOURCES CONSOLID√â
- Recrutements prioritaires (profils exacts)
- Formations internes n√©cessaires
- Partenariats strat√©giques recommand√©s

### 4. BUDGET PR√âVISIONNEL
- Investissements techniques (d√©veloppement, outils)
- Investissements humains (recrutement, formation)
- ROI attendu et m√©triques de succ√®s

Soyez CONCRET, CHIFFR√â et ACTIONNABLE.
"""

        response = self.orchestrator_model.generate_content(prompt)
        return response.text

    def generate_detailed_reports(self, orchestrated_results: Dict[str, Any]) -> Dict[str, str]:
        """
        G√©n√®re les 2 rapports d√©taill√©s finaux

        Args:
            orchestrated_results: R√©sultats de l'orchestration

        Returns:
            Dictionnaire avec les 2 rapports
        """
        print("\nüìë √âTAPE 6: G√©n√©ration des rapports d√©taill√©s")
        print("=" * 50)

        # Rapport 1: Mod√®les/Technologies
        print("üîÑ G√©n√©ration du rapport sur les mod√®les...")
        models_report = self._generate_models_report(orchestrated_results)

        # Rapport 2: Comp√©tences/RH
        print("üîÑ G√©n√©ration du rapport sur les comp√©tences...")
        skills_report = self._generate_skills_report(orchestrated_results)

        return {
            'models_report': models_report,
            'skills_report': skills_report
        }

    def _generate_models_report(self, results: Dict[str, Any]) -> str:
        """G√©n√®re le rapport d√©taill√© sur les mod√®les"""

        prompt = f"""
# RAPPORT TECHNIQUE D√âTAILL√â - ANALYSE DES MOD√àLES ET TECHNOLOGIES

## CONTEXTE
Bas√© sur l'analyse compl√®te des besoins clients et des capacit√©s internes, produisez un rapport technique exhaustif.

## DONN√âES SOURCES
### Besoins Clients
{results['customer_needs'][:1000]}...

### Analyse des √âcarts
{results['gap_analysis'][:1000]}...

### Correspondance Modulaire
{results['module_match'][:1000]}...

### Synth√®se Orchestr√©e
{results['orchestrator_synthesis'][:1000]}...

## STRUCTURE DU RAPPORT DEMAND√âE

### 1. INVENTAIRE TECHNOLOGIQUE ACTUEL
**Mod√®les/Technologies existants** (avec √©valuation 1-10):
- Technologies Frontend (React, Vue.js, etc.)
- Technologies Backend (APIs, microservices, etc.)
- Mod√®les ML/AI existants
- Infrastructure et DevOps
- Bases de donn√©es et stockage

### 2. MOD√àLES √Ä OPTIMISER/AJUSTER
Pour chaque mod√®le identifi√©:
- **Nom du mod√®le**: [Description]
- **Probl√®me actuel**: [Gap identifi√©]
- **Ajustements requis**: [Actions concr√®tes]
- **Effort estim√©**: [Temps/Complexit√©]
- **Impact business**: [B√©n√©fices attendus]
- **Priorit√©**: [Critique/Haute/Moyenne]

### 3. MOD√àLES √Ä D√âVELOPPER DE Z√âRO
Pour chaque nouveau d√©veloppement:
- **Nom du mod√®le**: [Description]
- **Justification**: [Pourquoi n√©cessaire]
- **Sp√©cifications techniques**: [D√©tails techniques]
- **Technologies recommand√©es**: [Stack technique]
- **√âquipe requise**: [Profils et dur√©e]
- **Jalons de d√©veloppement**: [Timeline d√©taill√©e]
- **Co√ªt estim√©**: [Budget pr√©visionnel]

### 4. ARCHITECTURE CIBLE
- Diagramme conceptuel de l'architecture finale
- Int√©grations entre anciens et nouveaux mod√®les
- Plan de migration et d√©ploiement
- Strat√©gie de tests et validation

### 5. ROADMAP TECHNIQUE D√âTAILL√âE
**Trimestre 1**:
- Actions prioritaires (liste d√©taill√©e)
- Ressources allou√©es
- Livrables attendus

**Trimestre 2-4**:
- D√©veloppements majeurs
- Int√©grations complexes
- Optimisations

### 6. RISQUES ET MITIGATIONS
- Risques techniques identifi√©s
- Plans de contingence
- Strat√©gies de mitigation

Soyez TR√àS D√âTAILL√â, TECHNIQUE et ACTIONNABLE. Utilisez des exemples concrets et des m√©triques pr√©cises.
"""

        response = self.orchestrator_model.generate_content(prompt)
        return response.text

    def _generate_skills_report(self, results: Dict[str, Any]) -> str:
        """G√©n√®re le rapport d√©taill√© sur les comp√©tences"""

        prompt = f"""
# RAPPORT RH STRAT√âGIQUE - ANALYSE DES COMP√âTENCES ET GAPS ORGANISATIONNELS

## CONTEXTE
Analyse approfondie des comp√©tences n√©cessaires vs disponibles pour r√©ussir le projet client.

## DONN√âES SOURCES
### Besoins Clients
{results['customer_needs'][:1000]}...

### Analyse des √âcarts
{results['gap_analysis'][:1000]}...

### Correspondance Modulaire  
{results['module_match'][:1000]}...

### Synth√®se Orchestr√©e
{results['orchestrator_synthesis'][:1000]}...

## STRUCTURE DU RAPPORT DEMAND√âE

### 1. AUDIT DES COMP√âTENCES ACTUELLES
**Cartographie par domaine** (score 1-10 par comp√©tence):

**Techniques**:
- D√©veloppement (Frontend, Backend, Full-stack)
- Data Science & ML (Python, TensorFlow, etc.)
- DevOps & Infrastructure (AWS, Docker, K8s)
- S√©curit√© informatique
- Architecture syst√®me

**M√©tiers**:
- Gestion de projet (Agile, Scrum)
- Product Management
- UX/UI Design
- Business Analysis
- Support client

### 2. COMP√âTENCES √Ä D√âVELOPPER (FORMATION INTERNE)
Pour chaque comp√©tence identifi√©e:
- **Comp√©tence**: [Nom pr√©cis]
- **Gap identifi√©**: [√âcart niveau actuel vs requis]
- **Employ√©s concern√©s**: [Noms/profils]
- **Plan de formation**: [Programme d√©taill√©]
- **Dur√©e**: [Temps n√©cessaire]
- **Co√ªt**: [Budget formation]
- **M√©trique de succ√®s**: [Comment mesurer la progression]
- **Priorit√©**: [Critique/Haute/Moyenne]

### 3. RECRUTEMENTS N√âCESSAIRES
Pour chaque poste √† pourvoir:
- **Intitul√© du poste**: [Titre exact]
- **Comp√©tences requises**: [Liste d√©taill√©e]
- **Niveau d'exp√©rience**: [Junior/Senior/Expert]
- **Justification**: [Pourquoi ce recrutement]
- **Salaire estim√©**: [Fourchette]
- **Urgence**: [Timeline de recrutement]
- **Profil id√©al**: [Description compl√®te]
- **Missions principales**: [Responsabilit√©s]

### 4. GAPS ORGANISATIONNELS G√âN√âRAUX
**Structure organisationnelle**:
- Manques dans l'organigramme
- Besoins en leadership technique
- Processus √† optimiser

**Communication & Collaboration**:
- Outils collaboratifs manquants
- Processus de communication
- Gestion des connaissances

**Culture d'entreprise**:
- Adaptation √† l'innovation
- Gestion du changement
- Formation continue

### 5. PLAN D'ACTION RH CONSOLID√â
**Phase 1 (0-3 mois)**:
- Recrutements urgents
- Formations critiques
- R√©organisations imm√©diates

**Phase 2 (3-6 mois)**:
- D√©veloppement des comp√©tences
- Int√©gration des nouvelles recrues
- Optimisation des processus

**Phase 3 (6+ mois)**:
- Mont√©e en comp√©tences avanc√©e
- √âvaluation et ajustements
- Plan de carri√®re et r√©tention

### 6. BUDGET RH GLOBAL
- Co√ªt total des recrutements
- Budget formation et d√©veloppement
- ROI attendu en termes de productivit√©
- Plan de financement

### 7. INDICATEURS DE PERFORMANCE
- KPIs de suivi des comp√©tences
- M√©triques de satisfaction √©quipe
- Indicateurs de productivit√©
- Taux de r√©tention cible

Soyez TR√àS PR√âCIS sur les profils, les comp√©tences et les actions concr√®tes √† mener.
"""

        response = self.orchestrator_model.generate_content(prompt)
        return response.text

    def export_all_reports_to_pdf(self, all_results: Dict[str, Any], reports: Dict[str, str]) -> Dict[str, str]:
        """Exporte tous les rapports en PDF"""
        print("\nüìÑ √âTAPE 7: Export des rapports PDF")
        print("=" * 50)

        pdf_paths = {}

        # Export rapport mod√®les
        models_pdf = "rapport_modeles_technologies.pdf"
        self._create_styled_pdf(reports['models_report'], models_pdf, "Rapport Mod√®les & Technologies")
        pdf_paths['models_pdf'] = models_pdf

        # Export rapport comp√©tences
        skills_pdf = "rapport_competences_rh.pdf"
        self._create_styled_pdf(reports['skills_report'], skills_pdf, "Rapport Comp√©tences & RH")
        pdf_paths['skills_pdf'] = skills_pdf

        # Export synth√®se orchestr√©e
        synthesis_pdf = "synthese_orchestree_globale.pdf"
        self._create_styled_pdf(all_results['orchestrator_synthesis'], synthesis_pdf, "Synth√®se Orchestr√©e Globale")
        pdf_paths['synthesis_pdf'] = synthesis_pdf

        return pdf_paths

    def _create_styled_pdf(self, content: str, filename: str, title: str):
        """Cr√©e un PDF styl√© √† partir du contenu"""
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=0.75*inch,
            leftMargin=0.75*inch,
            topMargin=1*inch,
            bottomMargin=0.75*inch
        )

        # Styles personnalis√©s
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=HexColor('#2E86AB'),
            fontName='Helvetica-Bold'
        )

        story = [Paragraph(title, title_style), Spacer(1, 20)]

        # Traitement du contenu
        paragraphs = content.split('\n\n')
        for para in paragraphs:
            if para.strip():
                # Nettoyage et formatage
                clean_para = para.replace('\n', '<br/>')
                clean_para = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', clean_para)
                clean_para = re.sub(r'\*(.*?)\*', r'<i>\1</i>', clean_para)

                if para.startswith('#'):
                    story.append(Paragraph(clean_para.lstrip('#').strip(), styles['Heading2']))
                else:
                    story.append(Paragraph(clean_para, styles['Normal']))
                story.append(Spacer(1, 12))

        doc.build(story)
        print(f"‚úÖ PDF g√©n√©r√©: {filename}")

    def run_complete_analysis(self) -> Dict[str, Any]:
        """Lance l'analyse compl√®te du syst√®me"""
        print("üöÄ D√âMARRAGE DU SYST√àME D'ANALYSE RFP INT√âGR√â")
        print("=" * 60)

        try:
            # √âtape 1: Upload RFP
            rfp_path = self.upload_rfp_interface()

            # √âtape 1bis: Analyse des besoins clients
            print("\nüîÑ Analyse des besoins clients en cours...")
            customer_needs_result = self.customer_needs_agent.process_rfp(rfp_path)

            if not customer_needs_result['success']:
                raise Exception(f"Erreur analyse besoins: {customer_needs_result['error']}")

            customer_needs = customer_needs_result['report_text']
            print("‚úÖ Analyse des besoins termin√©e")

            # √âtape 2: R√©cup√©ration des autres fichiers
            analysis_report_path = self.get_analysis_report_path()
            company_resources_path = self.load_company_resources()
            employee_data_path = self.load_employee_data()

            # √âtape 3: Orchestration des agents
            orchestrated_results = self.orchestrate_agents(
                customer_needs, analysis_report_path,
                company_resources_path, employee_data_path
            )

            # √âtape 4: G√©n√©ration des rapports d√©taill√©s
            detailed_reports = self.generate_detailed_reports(orchestrated_results)

            # √âtape 5: Export PDF
            pdf_paths = self.export_all_reports_to_pdf(orchestrated_results, detailed_reports)

            # R√©sultats finaux
            final_results = {
                'success': True,
                'customer_needs_analysis': customer_needs_result,
                'orchestrated_analysis': orchestrated_results,
                'detailed_reports': detailed_reports,
                'pdf_exports': pdf_paths,
                'summary': {
                    'rfp_processed': rfp_path,
                    'reports_generated': len(detailed_reports),
                    'pdfs_created': len(pdf_paths)
                }
            }

            self._display_final_summary(final_results)
            return final_results

        except Exception as e:
            print(f"\n‚ùå ERREUR SYST√àME: {e}")
            return {'success': False, 'error': str(e)}

    def _display_final_summary(self, results: Dict[str, Any]):
        """Affiche le r√©sum√© final"""
        print("\n" + "=" * 60)
        print("üéâ ANALYSE COMPL√àTE TERMIN√âE AVEC SUCC√àS!")
        print("=" * 60)

        print(f"\nüìä R√âSUM√â GLOBAL:")
        print(f"   ‚Ä¢ RFP trait√©: {results['summary']['rfp_processed']}")
        print(f"   ‚Ä¢ Rapports g√©n√©r√©s: {results['summary']['reports_generated']}")
        print(f"   ‚Ä¢ PDFs cr√©√©s: {results['summary']['pdfs_created']}")

        print(f"\nüìÑ FICHIERS G√âN√âR√âS:")
        for key, path in results['pdf_exports'].items():
            print(f"   ‚Ä¢ {key}: {path}")

        print(f"\n‚ú® Le syst√®me d'analyse RFP int√©gr√© a termin√© avec succ√®s!")
        print(f"   Tous les rapports sont disponibles dans le r√©pertoire courant.")


# Classes agents sp√©cialis√©s

class GapAnalysisAgent:
    """Agent d'analyse des √©carts"""

    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("models/gemini-2.0-flash-exp")

    def analyze(self, files_data: Dict[str, Any]) -> str:
        """Analyse les √©carts entre besoins et ressources"""

        prompt = f"""
# ANALYSE STRAT√âGIQUE D'√âCARTS (GAP ANALYSIS) - MCP FRAMEWORK

## CONTEXTE OP√âRATIONNEL
Vous √™tes un consultant strat√©gique charg√© d'identifier et quantifier les √©carts entre :
- Les exigences clients (besoins m√©tiers et techniques)
- Les capacit√©s actuelles de l'entreprise  
- Les comp√©tences disponibles des √©quipes

## DONN√âES SOURCES
=== BESOINS CLIENTS ===
{files_data['client_needs'][:1500]}...

=== RESSOURCES INTERNES ===
{files_data['company_resources'][:1500]}...

=== RAPPORT D'ANALYSE ===
{files_data['analysis_report'][:1500]}...

## M√âTHODOLOGIE D'ANALYSE
### 1. MATCH (CORRESPONDANCES)
- Identifier les capacit√©s **parfaitement align√©es** (score 90-100%)
- Lister les ressources **partiellement utilisables** (score 50-89%)
- Calculer le **taux de couverture global**

### 2. COMPARE (ECARTS CRITIQUES)
Classer les gaps en 3 cat√©gories :
1. **Techniques** (Outils/Technologies manquantes)
   - Niveau : Critique/Haute/Moyenne/Faible
   - Impact : Chiffr√© (‚Ç¨, temps, risque)
   
2. **Comp√©tences** (Gaps de savoir-faire)  
   - Cartographie des comp√©tences manquantes
   - Niveau requis vs. actuel (Expert/Interm√©diaire/D√©butant)
   
3. **Organisationnels** (Processus/Structure)
   - Ad√©quation √©quipes/projets
   - Gouvernance et flux d√©cisionnels

### 3. PREDICT (SOLUTIONS STRAT√âGIQUES)
Pour chaque gap critique :
- Solutions **internes** (R√©affectation/Formation)
- Solutions **externes** (Recrutement/Partnership)
- Plan de mitigation des risques

## FORMAT DE SORTIE REQUIS
Produisez une analyse d√©taill√©e et structur√©e avec des recommandations concr√®tes et chiffr√©es.
"""

        response = self.model.generate_content(prompt)
        return response.text


class ModuleMatchAgent:
    """Agent de correspondance modulaire"""

    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("models/gemini-2.0-flash-exp")

    def analyze(self, files_data: Dict[str, Any]) -> str:
        """Analyse la correspondance entre modules"""

        prompt = f"""
# ANALYSE TECHNIQUE DE CORRESPONDANCE MODULAIRE - MCP (MATCH, COMPARE, PREDICT)

## CONTEXTE STRAT√âGIQUE
Vous √™tes un expert en analyse technique charg√© d'√©valuer l'ad√©quation entre :
- Les besoins clients (exigences fonctionnelles et techniques)
- Les ressources/modules existants de l'entreprise

## DONN√âES D'ENTR√âE
=== EXIGENCES CLIENT ===
{files_data['client_needs'][:1500]}...

=== RESSOURCES ENTREPRISE ===
{files_data['company_resources'][:1500]}...

=== RAPPORT D'ANALYSE ===
{files_data['analysis_report'][:1500]}...

## DIRECTIVES D'ANALYSE
### PHASE 1: MATCH (CORRESPONDANCES EXACTES)
1. Identifier les paires [besoin ‚Üí ressource] parfaitement align√©es
2. Pour chaque match :
   - Technologies communes
   - Couverture fonctionnelle (%)
   - Niveau de maturit√© (1-5)
3. Calculer le taux global de correspondance

### PHASE 2: COMPARE (ANALYSE DES √âCARTS)
1. Lister les composants manquants class√©s par :
   - Criticit√© (Bloquant/Critique/Mineur)
   - Type (Frontend/Backend/ML/Data/Infra)
2. √âvaluer pour chaque gap :
   - Complexit√© de d√©veloppement (1-10)
   - D√©pendances techniques
   - Impact business (1-5)

### PHASE 3: PREDICT (RECOMMANDATIONS)
1. Roadmap technique prioris√©e :
   - Modules √† d√©velopper (urgence + complexit√©)
   - Modules √† adapter (optimisation)
2. Besoins en ressources :
   - Comp√©tences techniques requises
   - Estimation temps (semaines)
   - Co√ªt approximatif

Produisez une analyse technique d√©taill√©e avec des recommandations pr√©cises et r√©alisables.
"""

        response = self.model.generate_content(prompt)
        return response.text


# Point d'entr√©e principal
def main():
    """Point d'entr√©e principal du syst√®me"""

    # Configuration des cl√©s API
    TOGETHER_API_KEY = "8201d29393384428ba1c32e5e16a55d2d67188d618f94476b26ef0414e59e8dc"
    GEMINI_API_KEY = "AIzaSyCCKsZYOSP53ZGjF9p0ro1eNUYcdODCbtk"

    # Initialisation et lancement du syst√®me
    system = IntegratedRFPAnalysisSystem(TOGETHER_API_KEY, GEMINI_API_KEY)
    results = system.run_complete_analysis()

    # D√©finir les chemins des deux fichiers PDF
    pdf_path_1 = "rapport_competences_rh.pdf"
    pdf_path_2 = "rapport_modeles_technologies.pdf"

    # Cr√©er une instance de ton g√©n√©rateur
    generateur = RFPResponseGenerator(pdf_path_1, pdf_path_2)

    company_info = {
    'company_name': 'Talan Tunisie Consulting',
    'trading_name': 'Talan',
    'address': '10 Rue de l\'√©nergie solaire, Impasse N¬∞1, Charguia 1, Tunis 2035',
    'website': 'www.talan.com',
    'entity_type': 'Filiale d‚Äôun groupe international de conseil et d‚Äôexpertises technologiques',
    'country': 'Tunisie',
    'contact_name': 'Imen Ayari',
    'contact_position': 'Consultante',
    'phone': '+216 71 809 300',
    'email': 'contact.tunisie@talan.com',
    'signatory_name': 'Imen Ayari',
    'signatory_title': 'Repr√©sentante de la filiale Talan Tunisie'
    }


    try:
        # G√©n√©ration de la r√©ponse √† partir des deux PDF
        rfp_response = generateur.generate_rfp_response(company_info)
        print("‚úÖ R√©ponse g√©n√©r√©e avec succ√®s !\n")
        rfp_resp_file = f'RFP_Response.md'
        with open(rfp_resp_file, 'w', encoding='utf-8') as f:
            f.write(rfp_response)

        print("‚úÖ R√©ponse RFP g√©n√©r√©e avec succ√®s!")
        print(f"üìÅ Fichier sauvegard√©: {rfp_resp_file}")


        return rfp_response, rfp_resp_file

    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")


if __name__ == "__main__":
    main()